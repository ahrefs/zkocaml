(* ZkOCaml: OCaml Binding For Apache ZooKeeper
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)


(**
 * ZooKeeper handle.
 *
 * This is the handle that represents a connection to
 * the ZooKeeper service. It is needed to invoke any
 * ZooKeeper function. A handle is obtained using
 * zookeeper_init.
 **)
type zhandle

(**
 * client id structure.
 *
 * This structure holds the id and password for the session.
 * This structure should be treated as opaque.
 * It is received from the server when a session is established
 * and needs to be sent back as-is when reconnecting a session.
 **)
type client_id = {client_id: int64; passwd: string}

type acl = {perms: int; scheme: string; id: string}
type acls = acl array

type strings = string array

type stat = {
  czxid: int64;
  mzxid: int64;
  ctime: int64;
  mtime: int64;
  version: int;
  cversion: int;
  aversion: int;
  ephemeral_owner: int64;
  data_length: int;
  num_children: int;
  pzxid: int
}

type error =
  ZOK (*!< Everything is OK *)

  (** System and server-side errors.
   * This is never thrown by the server, it shouldn't be used other than
   * to indicate a range. Specifically error codes greater than this
   * value, but lesser than {ZAPIERROR}, are system errors.
   **)
  | ZSYSTEMERROR
  | ZRUNTIMEINCONSISTENCY (*!< A runtime inconsistency was found *)
  | ZDATAINCONSISTENCY    (*!< A data inconsistency was found *)
  | ZCONNECTIONLOSS       (*!< Connection to the server has been lost *)
  | ZMARSHALLINGERROR     (*!< Error while marshalling or unmarshalling data *)
  | ZUNIMPLEMENTED        (*!< Operation is unimplemented *)
  | ZOPERATIONTIMEOUT     (*!< Operation timeout *)
  | ZBADARGUMENTS         (*!< Invalid arguments *)
  | ZINVALIDSTATE         (*!< Invliad zhandle state *)

  (** API errors.
   * This is never thrown by the server, it shouldn't be used other than
   * to indicate a range. Specifically error codes greater than this
   * value are API errors (while values less than this indicate a
   * ZSYSTEMERROR.
   **)
  | ZAPIERROR
  | ZNONODE                (*!< Node does not exist *)
  | ZNOAUTH                (*!< Not authenticated *)
  | ZBADVERSION            (*!< Version conflict *)
  | ZNOCHILDRENFOREPHEMERALS (*!< Ephemeral nodes may not have children *)
  | ZNODEEXISTS            (*!< The node already exists *)
  | ZNOTEMPTY              (*!< The node has children *)
  | ZSESSIONEXPIRED        (*!< The session has been expired by the server *)
  | ZINVALIDCALLBACK       (*!< Invalid callback specified *)
  | ZINVALIDACL            (*!< Invalid ACL specified *)
  | ZAUTHFAILED            (*!< Client authentication failed *)
  | ZCLOSING               (*!< ZooKeeper is closing *)
  | ZNOTHING               (*!< (not error) no server responses to process *)
  | ZSESSIONMOVED          (*!<session moved to another server, so operation is ignored *)

(**
 * Watch types.
 * These constants indicate the event that caused the watch event.
 * They are possible values of the first parameter of the watcher callback.
 *)
type event =
  (**
   * A node has been created.
   * This is only generated by watches on non-existent nodes.
   * These watches are set using zoo_exists.
   **)
  ZOO_CREATED_EVENT

  (**
   * A node has been deleted.
   *
   * This is only generated by watches on nodes.
   * These watches are set using zoo_exists and zoo_get.
   **)
  | ZOO_DELETED_EVENT

  (**
   * A node has been changed.
   *
   * This is only generated by watches on nodes.
   * These watches are set using zoo_exists and zoo_get.
   **)
  | ZOO_CHANGED_EVENT

  (**
   * A change as occurred in the list of children.
   *
   * This is only generated by watches on the child list of a node.
   * These watches are set using get_children or get_children2.
   **)
  | ZOO_CHILD_EVENT

  (**
   * A session has been lost.
   *
   * This is generated when a client loses contact or reconnects with a server.
   **)
  | ZOO_SESSION_EVENT

  (**
  * A watch has been removed.
  *
  * This is generated when the server for some reason, probably a resource
  * constraint, will no longer watch a node for a client.
  **)
  | ZOO_NOTWATCHING_EVENT

type perm =
  ZOO_PERM_READ
  | ZOO_PERM_WRITE
  | ZOO_PERM_CREATE
  | ZOO_PERM_DELETE
  | ZOO_PERM_ADMIN
  | ZOO_PERM_ALL

(**
 * Connection state.
 * These constants represent the states of a zookeeper connection.
 * They are possible parameters of the watcher callback.
 *)
type state =
  ZOO_EXPIRED_SESSION_STATE
  | ZOO_AUTH_FAILED_STATE
  | ZOO_CONNECTING_STATE
  | ZOO_ASSOCIATING_STATE
  | ZOO_CONNECTED_STATE

(**
 * Create flags
 *
 * These flags are used by zoo_create to affect node create.
 * They may be ORed together to combine effects.
 **)
type create_flag =
  ZOO_EPHEMERAL
  | ZOO_SEQUENCE

(* Debug levels *)
type log_level =
  ZOO_LOG_LEVEL_ERROR
  | ZOO_LOG_LEVEL_WARN
  | ZOO_LOG_LEVEL_INFO
  | ZOO_LOG_LEVEL_DEBUG

(**
 * Signature of a watch function.
 *
 * There are two ways to receive watch notifications: legacy and watcher object.
 *
 * The legacy style, an application wishing to receive events from ZooKeeper must
 * first implement a function with this signature and pass a pointer to the function
 * to zookeeper_init. Next, the application sets a watch by calling one of
 * the getter API that accept the watch integer flag (for example, zoo_aexists,
 *  zoo_get, etc).
 *
 * The watcher object style uses an instance of a "watcher object" which in
 * the C world is represented by a pair: a pointer to a function implementing this
 * signature and a pointer to watcher context -- handback user-specific data.
 * When a watch is triggered this function will be called along with
 * the watcher context. An application wishing to use this style must use
 * the getter API functions with the "w" prefix in their names (for example,
 * zoo_awexists, zoo_wget, etc).
 *
 * \param zh zookeeper handle
 * \param type event type. This is one of the *_EVENT constants.
 * \param state connection state. The state value will be one of the *_STATE constants.
 * \param path znode path for which the watcher is triggered. NULL if the event
 * type is ZOO_SESSION_EVENT
 * \param watcherCtx watcher context.
 **)
type watcher_callback = zhandle -> event -> state -> string -> string -> unit

(**
 * Signature of a completion function for a call that returns void.
 *
 * This method will be invoked at the end of a asynchronous call and also as
 * a result of connection loss or timeout.
 *
 * @rc the error code of the call. Connection loss/timeout triggers
 * the completion with one of the following error codes:
 *   ZCONNECTIONLOSS -- lost connection to the server
 *   ZOPERATIONTIMEOUT -- connection timed out
 * Data related events trigger the completion with error codes listed the
 * Exceptions section of the documentation of the function that initiated the
 * call. (Zero indicates call was successful.)
 *
 * @data the pointer that was passed by the caller when the function
 * that this completion corresponds to was invoked. The programmer
 * is responsible for any memory freeing associated with the data
 * pointer.
 *)
type void_completion_callback = error -> string -> unit

(**
 * Signature of a completion function that returns a Stat structure.
 *
 * This method will be invoked at the end of a asynchronous call and also as
 * a result of connection loss or timeout.
 *
 * @rc the error code of the call. Connection loss/timeout triggers
 * the completion with one of the following error codes:
 *   ZCONNECTIONLOSS -- lost connection to the server
 *   ZOPERATIONTIMEOUT -- connection timed out
 * Data related events trigger the completion with error codes listed the
 * Exceptions section of the documentation of the function that initiated the
 * call. (Zero indicates call was successful.)
 *
 * @stat a pointer to the stat information for the node involved in
 * this function. If a non zero error code is returned, the content of
 * stat is undefined. The programmer is NOT responsible for freeing stat.
 *
 * @data the pointer that was passed by the caller when the function
 * that this completion corresponds to was invoked. The programmer
 * is responsible for any memory freeing associated with the data
 * pointer.
 *)
type stat_completion_callback = error -> stat -> string -> unit

(**
 * Signature of a completion function that returns data.
 *
 * This method will be invoked at the end of a asynchronous call and also as
 * a result of connection loss or timeout.
 *
 * @rc the error code of the call. Connection loss/timeout triggers
 * the completion with one of the following error codes:
 *   ZCONNECTIONLOSS -- lost connection to the server
 *   ZOPERATIONTIMEOUT -- connection timed out
 * Data related events trigger the completion with error codes listed the
 * Exceptions section of the documentation of the function that initiated the
 * call. (Zero indicates call was successful.)
 *
 * @value the value of the information returned by the asynchronous call.
 * If a non zero error code is returned, the content of value is undefined.
 * The programmer is NOT responsible for freeing value.
 *
 * @stat a pointer to the stat information for the node involved in
 * this function. If a non zero error code is returned, the content of
 * stat is undefined. The programmer is NOT responsible for freeing stat.
 *
 * @data the pointer that was passed by the caller when the function
 * that this completion corresponds to was invoked. The programmer
 * is responsible for any memory freeing associated with the data
 * pointer.
 *)
type data_completion_callback = error -> string -> int -> stat -> string -> unit

(**
 * Signature of a completion function that returns a list of strings.
 *
 * This method will be invoked at the end of a asynchronous call and also as
 * a result of connection loss or timeout.
 *
 * @rc the error code of the call. Connection loss/timeout triggers
 * the completion with one of the following error codes:
 *   ZCONNECTIONLOSS -- lost connection to the server
 *   ZOPERATIONTIMEOUT -- connection timed out
 * Data related events trigger the completion with error codes listed the
 * Exceptions section of the documentation of the function that initiated the
 * call. (Zero indicates call was successful.)
 *
 * @strings a pointer to the structure containng the list of strings of the
 * names of the children of a node. If a non zero error code is returned,
 * the content of strings is undefined. The programmer is NOT responsible
 * for freeing strings.
 *
 * @data the pointer that was passed by the caller when the function
 * that this completion corresponds to was invoked. The programmer
 * is responsible for any memory freeing associated with the data
 * pointer.
 *)
type strings_completion_callback = error -> strings -> string -> unit

(**
 * Signature of a completion function that returns a list of strings and stat.
 *
 * This method will be invoked at the end of a asynchronous call and also as
 * a result of connection loss or timeout.
 *
 * @rc the error code of the call. Connection loss/timeout triggers
 * the completion with one of the following error codes:
 *   ZCONNECTIONLOSS -- lost connection to the server
 *   ZOPERATIONTIMEOUT -- connection timed out
 * Data related events trigger the completion with error codes listed the
 * Exceptions section of the documentation of the function that initiated the
 * call. (Zero indicates call was successful.)
 *
 * @strings a pointer to the structure containng the list of strings of the
 * names of the children of a node. If a non zero error code is returned,
 * the content of strings is undefined. The programmer is NOT responsible
 * for freeing strings.
 *
 * @stat a pointer to the stat information for the node involved in
 * this function. If a non zero error code is returned, the content of
 * stat is undefined. The programmer is NOT responsible for freeing stat.
 *
 * @data the pointer that was passed by the caller when the function
 * that this completion corresponds to was invoked. The programmer
 * is responsible for any memory freeing associated with the data
 * pointer.
 *)
type strings_stat_completion_callback = error -> strings -> stat -> string -> unit


(**
 * Signature of a completion function that returns a list of strings.
 *
 * This method will be invoked at the end of a asynchronous call and also as
 * a result of connection loss or timeout.
 *
 * @rc the error code of the call. Connection loss/timeout triggers
 * the completion with one of the following error codes:
 *   ZCONNECTIONLOSS -- lost connection to the server
 *   ZOPERATIONTIMEOUT -- connection timed out
 * Data related events trigger the completion with error codes listed the
 * Exceptions section of the documentation of the function that initiated the
 * call. (Zero indicates call was successful.)
 *
 * @value the value of the string returned.
 *
 * @data the pointer that was passed by the caller when the function
 * that this completion corresponds to was invoked. The programmer
 * is responsible for any memory freeing associated with the data
 * pointer.
 *)
type string_completion_callback = error -> string -> string -> unit

(*

(** This ID represents anyone. *)
let zoo_anyone_id_unsafe = {scheme = "world"; id = "anyone"}

(** This ID is only usable to set ACLs,
 * It will get substitued with the ID's the
 * client authenticated with. *)
let zoo_auth_ids = {scheme = "auth"; id = ""}

let open_acl_unsafe_acl_ = {perms = 0x1f; id = zoo_anyone_id_unsafe}
let read_acl_unsafe_acl_ = {perms = 0x01; id = zoo_anyone_id_unsafe}
let creator_all_acl_acl_ = {perms = 0x1f; id = zoo_auth_ids}

let zoo_open_acl_unsafe = [open_acl_unsafe_acl_]
let zoo_read_acl_unsafe = [read_acl_unsafe_acl_]
let zoo_creator_all_acl = [creator_all_acl_acl_]

*)

external init : string -> watcher_callback ->
    int -> client_id -> string ->
    int -> zhandle = "zkocaml_init_bytecode" "zkocaml_init_native"

external close : zh:zhandle -> error = "zkocaml_close"

external client_id : zh:zhandle -> client_id = "zkocaml_client_id"

external recv_timeout : zh:zhandle -> int = "zkocaml_recv_timeout"

external get_context : zh:zhandle -> string = "zkocaml_get_context"

external set_context : zh:zhandle -> context:string -> unit = "zkocaml_set_context"

external set_watcher : zh:zhandle -> watcher_fn:watcher_callback
  -> watcher_callback = "zkocaml_set_watcher"

external get_connected_host : zh:zhandle -> string = "zkocaml_get_connected_host"

external zstate : zh:zhandle -> state = "zkocaml_state"

external acreate : zhandle -> string -> string
  -> acls -> create_flag -> string_completion_callback
  -> string -> error = "zkocaml_acreate_bytecode" "zkocaml_acreate_native"

external adelete: zhandle -> string -> int -> void_completion_callback
  -> string -> error = "zkocaml_adelete"
